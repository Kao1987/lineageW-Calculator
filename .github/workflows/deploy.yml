# deploy.yml

name: Deploy to Production Server

# 這個工作流程只在 main 分支有 push 事件時觸發
on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # 使用最新的 Ubuntu 虛擬環境

    steps:
      # 步驟 1: 下載你的程式碼到虛擬環境中
      - name: Checkout code
        uses: actions/checkout@v4

      # 步驟 2: 設定 Node.js 環境
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # 使用 Node.js 20.x 版本
          cache: 'npm' # 快取 npm 的套件，加速未來的 build

      # 新增步驟: 根據 Rollup 錯誤提示，移除 lock 檔，強制重新解析依賴
      - name: Remove package-lock.json
        run: rm package-lock.json

      # 步驟 3: 安裝專案依賴 (恢復成原本的 npm install)
      - name: Install dependencies
        run: npm install

      # 步驟 4: 編譯專案
      - name: Build project
        run: npm run build

      # 步驟 5: 將編譯好的 dist 資料夾部署到你的伺服器
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # 進入目標資料夾
            cd ${{ secrets.TARGET_DIR }}
            # 刪除舊的 dist
            rm -rf dist
            echo "Deployment to server started..."

      # 步驟 6: 使用 scp 安全地複製新的 dist 資料夾
      - name: SCP dist folder
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: './dist'
          target: ${{ secrets.TARGET_DIR }}

      # 步驟 7: 清理 Cloudflare 快取 (可選，但強烈建議)
      - name: Purge Cloudflare cache
        run: echo "Cloudflare purge step can be added here later."
